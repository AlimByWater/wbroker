// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: wbroker.proto

package wbroker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WBrokerClient is the client API for WBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WBrokerClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (WBroker_SubscribeClient, error)
}

type wBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewWBrokerClient(cc grpc.ClientConnInterface) WBrokerClient {
	return &wBrokerClient{cc}
}

func (c *wBrokerClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/wbroker.WBroker/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wBrokerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (WBroker_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &WBroker_ServiceDesc.Streams[0], "/wbroker.WBroker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &wBrokerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WBroker_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type wBrokerSubscribeClient struct {
	grpc.ClientStream
}

func (x *wBrokerSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WBrokerServer is the server API for WBroker service.
// All implementations must embed UnimplementedWBrokerServer
// for forward compatibility
type WBrokerServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(*SubscribeRequest, WBroker_SubscribeServer) error
	mustEmbedUnimplementedWBrokerServer()
}

// UnimplementedWBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedWBrokerServer struct {
}

func (UnimplementedWBrokerServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedWBrokerServer) Subscribe(*SubscribeRequest, WBroker_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedWBrokerServer) mustEmbedUnimplementedWBrokerServer() {}

// UnsafeWBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WBrokerServer will
// result in compilation errors.
type UnsafeWBrokerServer interface {
	mustEmbedUnimplementedWBrokerServer()
}

func RegisterWBrokerServer(s grpc.ServiceRegistrar, srv WBrokerServer) {
	s.RegisterService(&WBroker_ServiceDesc, srv)
}

func _WBroker_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WBrokerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wbroker.WBroker/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WBrokerServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WBroker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WBrokerServer).Subscribe(m, &wBrokerSubscribeServer{stream})
}

type WBroker_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type wBrokerSubscribeServer struct {
	grpc.ServerStream
}

func (x *wBrokerSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// WBroker_ServiceDesc is the grpc.ServiceDesc for WBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wbroker.WBroker",
	HandlerType: (*WBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _WBroker_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _WBroker_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wbroker.proto",
}
